Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/bionic64"
  config.disksize.size = '20GB'

  required_plugins = %w(
    vagrant-vbguest
    vagrant-disksize
    vagrant-reload
  )

  plugins_to_install = required_plugins.select { |plugin| not Vagrant.has_plugin? plugin }
  if not plugins_to_install.empty?
    puts "Installing plugins: #{plugins_to_install.join(' ')}"
    if system "vagrant plugin install #{plugins_to_install.join(' ')}"
      exec "vagrant #{ARGV.join(' ')}"
    else
      abort "Installation of one or more plugins has failed. Aborting."
    end
  end

  config.vagrant.plugins = "vagrant-vbguest"
  config.vm.provision "shell", path: "scripts/install_both.sh"
  config.vm.box_download_insecure = true
  config.vm.boot_timeout = 3600

  config.vm.define "driver", primary: true do |driver|
    driver.vm.network "private_network", ip: "192.168.56.10"
    driver.vm.hostname = "driver"
    driver.vm.network :forwarded_port, guest: 8888, host: 8888
    driver.vm.network :forwarded_port, guest: 9999, host: 9999
    driver.vm.network :forwarded_port, guest: 9000, host: 9000
    
    driver.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 1
    end

    driver.vm.provision :shell, inline: "echo fs.file-max = 65535 >> /etc/sysctl.conf && sysctl -p"
    driver.vm.provision "shell", path: "scripts/install_driver.sh" do |s|
      s.args = ["192.168.56.10"]
    end

    driver.vm.provision :reload
  end

  # The following ports should be open to allow Docker Swarm communication
  # - TCP port 2377 for cluster management communications
  # - TCP and UDP port 7946 for communication among nodes
  # - UDP port 4789 for overlay network traffic
  
  config.vm.define "testbed" do |testbed|
    testbed.vm.network "private_network", ip: "192.168.56.11"
    testbed.vm.hostname = "testbed"
    testbed.vm.network :forwarded_port, guest: 80, host: 8000
    testbed.vm.network :forwarded_port, guest: 8080, host: 8080

    testbed.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 1
    end

    testbed.vm.provision :shell, inline: "echo fs.file-max = 65535 >> /etc/sysctl.conf && sysctl -p"
    testbed.vm.provision "shell", path: "scripts/install_testbed.sh" do |s|
      s.args = ["192.168.56.11", "192.168.56.10:2377"]
    end

    testbed.vm.provision :reload
  end
end
